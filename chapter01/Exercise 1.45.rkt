#lang sicp
(define (average x y)
  (/ (+ x y) 2))
(define (average-damp f)
  (lambda (x) (average x (f x))))
(define (fixed-point f first-guess)
  (define tolerance 0.00001)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
            tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
(define (compose f g)
  (lambda (x) (f (g x))))
(define (repeated f n)
  (define (iter g count)
    (if (= count 1)
        g
        (iter (compose f g) (- count 1))))
  (iter f n))
(define (nth-power n x)
  (cond ((= n 0) 1)
        ((= n 1) x)
        ((even? n) (nth-power (/ n 2) (* x x)))
        (else (* (nth-power (- n 1) x) x))))
(define (nth-root n x)
  (fixed-point ((repeated average-damp (floor (log n 2)))
                (lambda (y) (/ x (nth-power (- n 1) y)))) 1.0))
(nth-root 32 4294967296)
(nth-power 32 2)
