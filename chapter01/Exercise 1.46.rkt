#lang sicp
(define (iterative-improve good-enough? improve-guess)
  (lambda (x)
    (if (good-enough? x)
        x
        ((iterative-improve good-enough? improve-guess) (improve-guess x)))))
(define (average x y)
  (/ (+ x y) 2))
(define (my-sqrt x)
  (define (good-enough? guess)
    (< (abs (- (* guess guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  ((iterative-improve good-enough? improve) 1.0))
(define (fixed-point f guess)
  (define tolerance 0.00001)
  (define (close-enough? x)
    (< (abs (- x (f x))) tolerance))
  (define (average-damp f)
    (lambda (x) (average x (f x))))
  ((iterative-improve close-enough? (average-damp f)) guess))

(my-sqrt 81)
(fixed-point (lambda (x) (/ 81 x)) 1.0)