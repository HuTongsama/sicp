#lang sicp
(define (sum term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (+ result (term a)))))
  (iter a 0))
(define (next x)
  (+ x 1))
(define (sum-identity a b)
  (define (identity x) x)
  (sum identity a next b))
(define (sum-square a b)
  (define (square x)
    (* x x))
  (sum square a next b))
(define (sum-cube a b)
  (define (cube x)
    (* x x x))
  (sum cube a next b))
(sum-identity 1 10)
(sum-square 1 10)
(sum-cube 1 10)

