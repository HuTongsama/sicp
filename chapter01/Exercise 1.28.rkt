#lang sicp
(define (Miller-Rabin-test n)
  (define (try-it a)
    (= (expmod a (- n 1) n) 1))
  (try-it (+ 1 (random (- n 2)))))
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((nontrivial-square-root? base m) 0)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m)) m))
        (else
        (remainder (* base (expmod base (- exp 1) m))
                   m))))
(define (square x)
  (* x x))
(define (nontrivial-square-root? a n)
  (and (not (= a 1))
       (not (= a (- n 1)))
       (= 1 (remainder (square a) n))))
(define (test n times)
  (cond ((= times 0) #t)
        ((Miller-Rabin-test n) (test n (- times 1)))
        (else #f)))
(test 561 (ceiling (/ 561 2)))
(test 1105 (ceiling (/ 1105 2)))
(test 1729 (ceiling (/ 1729 2)))
(test 2465 (ceiling (/ 2465 2)))
(test 2821 (ceiling (/ 2821 2)))
(test 6601 (ceiling (/ 6601 2)))
(test 233 (ceiling (/ 233 2)))
(test 467 (ceiling (/ 467 2)))
(test 661 (ceiling (/ 661 2)))
(test 1723 (ceiling (/ 1723 2)))
(test 2113 (ceiling (/ 2113 2)))