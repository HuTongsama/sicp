#lang sicp
(define (sum func a next b)
  (if (> a b)
      0
      (+ (func a)
         (sum func (next a) next b))))
(define (simpson-rule f a b n)
  (define h (/ (- b a) n))
  (define (factor k)
    (cond ((or (= k n) (= k 0)) 1)
          ((even? k) 2)
          ((odd? k) 4)))
  (define (y x)
    (f (+ a (* h x))))
  (define (term k)
    (* (factor k)
       (y k)))
  (define (next k)
    (+ 1 k))
  (* (/ h 3)
     (sum term (exact->inexact 0) next n)))
(define (cube x)
  (* x x x))
(simpson-rule cube 0 1 100)
(simpson-rule cube 0 1 1000)
