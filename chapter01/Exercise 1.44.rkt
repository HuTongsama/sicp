#lang sicp
(define (compose f g)
  (lambda (x) (f (g x))))
(define (repeated f n)
  (define (iter g count)
    (if (= count 1)
        g
        (iter (compose f g) (- count 1))))
  (iter f n))
(define (smooth f)
  (define dx 0.000001)
  (define (average a b c)
    (/ (+ a b c) 3))
  (lambda (x) (average (f (- x dx))
                       (f x)
                       (f (+ x dx)))))
(define (n-fold-smooth f n)
  ((repeated smooth n) f))
(define (square x)
  (* x x))
(square 2)
((smooth square) 2)
((n-fold-smooth square 10) 2)
