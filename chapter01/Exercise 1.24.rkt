#lang racket
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder
          (square (expmod base (/ exp 2) m))
          m))
        (else
         (remainder
          (* base (expmod base (- exp 1) m))
          m))))
(define (square x)
  (* x x))
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
  (cond ((= times 0) #t)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else #f)))
(define (timed-prime-test n)
  (start-prime-test n (current-inexact-milliseconds)))
(define (start-prime-test n start-time)
  (if (fast-prime? n 3)
       (report-prime n (- (current-inexact-milliseconds) start-time))
      #f))
(define (report-prime n elapsed-time)
  (display n)
  (display "***")
  (display elapsed-time)
  (newline))
(define (search-for-primes n counts)
  (cond ((= counts 0) (newline))
        ((timed-prime-test n)
         (search-for-primes (next-odd n) (- counts 1)))
        (else
         (search-for-primes (next-odd n) counts))))
(define (next-odd n)
  (if (even? n)
      (+ n 1)
      (+ n 2)))
(expmod 1000000000 100000000 3)