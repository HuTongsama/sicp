#lang sicp
(define (cont-frac n d k)
  (define (next x)
    (if (> x k)
        (/ (n k) (d k))
        (/ (n k)
           (+ (d k) (next (+ x 1))))))
  (next 1))
(define (cont-frac-iter n d k)
  (define (cal x result)
    (/ (n x)
       (+ (d x) result)))
  (define (iter count result)
    (if (< count 1)
        result
        (iter (- count 1)
              (cal count result))))
  (iter k 0))
(cont-frac (lambda (i) 1.0)
           (lambda (i) 1.0)
           100)
(cont-frac-iter (lambda (i) 1.0)
                (lambda (i) 1.0)
                100)