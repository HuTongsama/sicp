#lang sicp
(define (make-leaf symbol weight) (list 'leaf symbol weight))
(define (leaf? object) (eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))
(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))
(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))
(define (element-of-set? obj set)
  (cond ((null? set) #f)
        ((eq? (car set) obj) #t)
        (else
         (element-of-set? obj (cdr set)))))
(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))
(define (encode-symbol symbol tree)
  (define (iter symbol tree)
    (cond ((element-of-set? symbol (left-branch tree))
          (cons '0 (iter symbol (left-branch tree))))
          ((element-of-set? symbol (right-branch tree))
           (cons '1 (iter symbol right-branch tree)))
          (else '())))
  (if (not (element-of-set? symbol (symbols tree)))
      (error "error symbol")
      (iter symbol tree)))

