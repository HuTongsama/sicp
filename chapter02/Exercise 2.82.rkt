#lang racket
(define (apply-generic op . arg)
  (define (can-coerced-to? types target-type)
    (andmap (lambda (type)
              (or (eq? type target-type)
                  (get-coercion type target-type)))
            types))
  (define (coerced-to target-type types)
    (map (lambda (element)
           (let ((type (type-tag element)))
             (if (eq? type target-type)
                 element
                 ((get-coercion type target-type) element))))
         types))
  (define (loop remind-types types)
    (cond ((null? remind-types) '())
          ((can-coerced-to? types (car remind-types))
           (car remind-types))
          (else (loop (cdr remind-types) types))))
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (let ((target-type (loop type-tags type-tags)))
            (if (not (null? target-type))
                (apply apply-generic (append (list op) (coerced-to target-type arg)))
                (error "no method for these type" (list op types))))))))