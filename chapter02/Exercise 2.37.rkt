#lang sicp
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      nil
      (cons (accumulate op init
                        (accumulate (lambda (x y)
                                      (cons (car x) y)) nil seqs))
            (accumulate-n op init
                         (accumulate (lambda (x y)
                                       (cons (cdr x) y)) nil seqs)))))
(define (dot-product v w)
  (accumulate + 0 (map * v w)))
(define (matrix-*-vector m v)
  (map (lambda (row) (dot-product row v)) m))
(define (transpose mat)
  (accumulate-n cons nil mat))
(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda (row)
           (accumulate (lambda (x y)
                         (cons (dot-product row x) y))
                       nil
                       cols))
         m)))
(define v1 (list 1 2 3))
(define v2 (list 4 5 6))
(define mat (list (list 1 2 3)
                  (list 4 5 6)
                  (list 7 8 9)))
(dot-product v1 v2)
(matrix-*-vector mat v1)
(transpose mat)
(matrix-*-matrix mat (list (list 3 2 1)
                           (list 6 5 4)
                           (list 9 8 7)))