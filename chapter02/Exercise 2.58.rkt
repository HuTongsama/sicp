#lang racket
(require "deriv.rkt")
(define (=number? exp num) (and (number? exp) (= exp num)))
(define (make-sum a b)
  (cond ((=number? a 0) b)
        ((=number? b 0) a)
        ((and (number? a) (number? b)) (+ a b))
        (else (list  a '+ b ))))
(define (sum? x) (pair? x) (eq? (cadr x) '+))
(define (addend x) (cddr x))
(define (augend x) (car x))

(define (make-product a b)
  (cond ((or (=number? a 0) (=number? b 0)) 0)
        ((=number? a 1) b)
        ((=number? b 1) a)
        ((and (number? a) (number? b)) (* a b))
        (else (list a '* b))))
(define (product? x) (pair? x) (eq? (cadr x) '*))
(define (multiplier x) (cddr x))
(define (multiplicand x) (car x))

(define deriv-new deriv)
(deriv '(+ x 3) 'x)