#lang sicp
(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (make-deque) (cons '() '()))
(define (empty-deque? deque) (null? front-ptr deque))
(define (front-deque deque)
  (if (empty-deque? deque)
      (error "GET FRONT FAILED")
      (cadr (front-ptr deque))))
(define (rear-deque deque)
  (if (empty-deque? deque)
      (error "GET REAR FAILED")
      (cadr (rear-ptr deque))))
(define (front-insert-deque! ele deque)
  (let ((deque-ele (cons '() (cons ele '()))))
    (cond ((empty-deque?)
           (set-car! deque deque-ele)
           (set-cdr! deque deque-ele)
           deque)
          (else
           (set-cdr! (cdr deque-ele) (front-ptr deque))
           (set-car! (front-ptr deque) deque-ele)
           (set-car! deque deque-ele)
           deque))))
(define (rear-insert-deque! ele deque)
  (let ((deque-ele (cons '() (cons ele '()))))
    (cond ((empty-deque? deque)
           (set-car! deque deque-ele)
           (set-cdr! deque deque-ele)
           deque)
          (else
           (set-cdr! (cdr (rear-ptr deque)) deque-ele)
           (set-car! deque-ele (rear-ptr deque))
           (set-cdr! deque (cdr (rear-ptr deque)))
           deque))))
(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "failed to delete"))
         (else
          (set-car! deque (cddr (front-ptr deque)))
          (set-car! (front-ptr deque) '())
          deque)))
(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "failed to delete"))
        (else
         (set-cdr! deque (car (rear-ptr deque)))
         (set-cdr! (cdr (rear-ptr deque)) '())
         deque)))
(define (print-deque deque)
  (if (pair? deque)
      (display "\n")
      (begin
        (display (cadr deque))
        (print-deque (cddr deque)))))
