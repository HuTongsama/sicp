#lang sicp
(define (count-pairs x)
  (define pair-table '())
  (define (is-in-table? p table)
    (if (memq p table)
        #t
        #f))
  (define (iter cur-pair)
    (cond ((not (pair? cur-pair)) 0)
          ((is-in-table? cur-pair pair-table) 0)
          (else
           (begin (set! pair-table (cons cur-pair pair-table))
                  (+ (iter (car cur-pair))
                     (iter (cdr cur-pair))
                     1)
                  ))))
  (iter x)
  (display pair-table)
  (display "\n"))
(define a (cons 'A 'B))
(define b (cons 'C 'D))
(define list-test (cons a b))
(count-pairs list-test)
(set-cdr! a b)
(count-pairs list-test)
(set-car! a b)
(set-cdr! list-test a)
(count-pairs list-test)
