#lang sicp
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1)
                 (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1)
                 trials-passed))))
  (iter trials 0))
(define (estimate-integral p? x1 y1 x2 y2 trials)
  (let ((proportion (monte-carlo trials (lambda () (p? x1 y1 x2 y2))))
        (area (* (abs (- x1 x2)) (abs (- y1 y2))))
        (radius (min (/ (abs (- x1 x2)) 2) (/ (abs (- y1 y2)) 2))))
    (begin
      (display proportion)
      (display "\n")
      (display area)
      (display "\n")
      (display radius)
      (display "\n")
     (exact->inexact (/ (* proportion area) (* radius radius))))))
(define (is-in-region? x1 y1 x2 y2)
  (define (square num)
    (* num num))
  (let ((x (random-in-range (min x1 x2) (max x1 x2)))
        (y (random-in-range (min y1 y2) (max y1 y2)))
        (center (cons (/ (+ x1 x2) 2) (/ (+ y1 y2) 2)))
        (radius (min (/ (abs (- x1 x2)) 2) (/ (abs (- y1 y2)) 2))))
    (< (+ (square (- x (car center)))
          (square (- y (cdr center))))
       (square radius))))

(estimate-integral is-in-region? 2.0 4.0 8.0 10.0 10000)